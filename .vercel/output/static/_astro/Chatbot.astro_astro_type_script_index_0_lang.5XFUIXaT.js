const L="modulepreload",A=function(g){return"/"+g},x={},C=function(f,m,u){let i=Promise.resolve();if(m&&m.length>0){let c=function(n){return Promise.all(n.map(s=>Promise.resolve(s).then(d=>({status:"fulfilled",value:d}),d=>({status:"rejected",reason:d}))))};document.getElementsByTagName("link");const o=document.querySelector("meta[property=csp-nonce]"),h=o?.nonce||o?.getAttribute("nonce");i=c(m.map(n=>{if(n=A(n),n in x)return;x[n]=!0;const s=n.endsWith(".css"),d=s?'[rel="stylesheet"]':"";if(document.querySelector(`link[href="${n}"]${d}`))return;const r=document.createElement("link");if(r.rel=s?"stylesheet":L,s||(r.as="script"),r.crossOrigin="",r.href=n,h&&r.setAttribute("nonce",h),document.head.appendChild(r),s)return new Promise((v,y)=>{r.addEventListener("load",v),r.addEventListener("error",()=>y(new Error(`Unable to preload CSS for ${n}`)))})}))}function l(c){const o=new Event("vite:preloadError",{cancelable:!0});if(o.payload=c,window.dispatchEvent(o),!o.defaultPrevented)throw c}return i.then(c=>{for(const o of c||[])o.status==="rejected"&&l(o.reason);return f().catch(l)})};document.addEventListener("DOMContentLoaded",async()=>{const g=document.getElementById("chatbot-toggle"),f=document.getElementById("chatbot-window"),m=document.getElementById("emoji-toggle"),u=document.getElementById("emoji-picker"),i=document.getElementById("chatbot-messages"),l=document.getElementById("chatbot-input"),c=document.getElementById("chatbot-send"),o=document.getElementById("llm-status");if(!g||!f||!i||!l||!c){console.error("Critical chatbot elements not found");return}const h=m&&u;let n=!1,s=!1,d=!1;const{getChatbotResponse:r,isLLMAvailable:v,isExternalAIAvailable:y}=await C(async()=>{const{getChatbotResponse:e,isLLMAvailable:a,isExternalAIAvailable:t}=await import("./localLLM.BFCEGbvy.js");return{getChatbotResponse:e,isLLMAvailable:a,isExternalAIAvailable:t}},[]),p=(e,a)=>{const t=document.createElement("div");t.className=`flex ${e==="user"?"justify-end":"justify-start"} mb-3`,e==="bot"?t.innerHTML=`
          <div class="flex items-start space-x-2 max-w-[85%]">
            <img src="/rohitdeshpande.jpg" alt="Rohit" class="w-8 h-8 rounded-full mt-1 flex-shrink-0">
            <div class="bg-neutral/20 text-white px-4 py-2 rounded-lg text-sm leading-relaxed">
              ${a}
            </div>
          </div>
        `:t.innerHTML=`
          <div class="bg-primary text-white px-4 py-2 rounded-lg max-w-[85%] text-sm leading-relaxed">
            ${a}
          </div>
        `,i.appendChild(t),i.scrollTop=i.scrollHeight},E=()=>{const e=document.createElement("div");e.className="flex justify-start mb-3",e.id="typing-indicator",e.innerHTML=`
        <div class="flex items-start space-x-2 max-w-[85%]">
          <img src="/rohitdeshpande.jpg" alt="Rohit" class="w-8 h-8 rounded-full mt-1 flex-shrink-0">
          <div class="bg-neutral/20 text-white px-4 py-2 rounded-lg text-sm leading-relaxed">
            <div class="flex space-x-1">
              <div class="w-2 h-2 bg-white rounded-full animate-pulse"></div>
              <div class="w-2 h-2 bg-white rounded-full animate-pulse" style="animation-delay: 0.1s;"></div>
              <div class="w-2 h-2 bg-white rounded-full animate-pulse" style="animation-delay: 0.2s;"></div>
            </div>
          </div>
        </div>
      `,i.appendChild(e),i.scrollTop=i.scrollHeight},w=()=>{const e=document.getElementById("typing-indicator");e&&e.remove()},I=()=>{d||(setTimeout(()=>{const e=["Namaskar! 🙏 I'm Rohit Deshpande! Welcome to my portfolio! Feel free to ask me anything about my projects, skills, or journey in tech!","Namaskar! 🙏 Great to see you here! I'm Rohit, and I love talking about technology, AI/ML, and my work. What interests you most?","Kasa Kay! 🙏 I'm Rohit Deshpande. Welcome to my portfolio! Ask me anything about my projects, skills, or journey in tech!"],a=e[Math.floor(Math.random()*e.length)];let t="";s&&n?t=" (Powered by Cloud + Local AI!) ":s?t=" (Enhanced with Cloud AI!) ":n?t=" (Enhanced with Local AI!) ":t=" (Smart pattern matching!) ",p("bot",a+t)},500),d=!0)},b=async()=>{const e=l.value.trim();if(e){p("user",e),l.value="",u&&h&&u.classList.add("hidden"),E();try{const a=await r(e);w();let t=a.response;p("bot",t)}catch(a){console.error("Error getting response:",a),w(),p("bot","Sorry, I'm having trouble processing that right now! 😅 Try asking about my skills, projects, or experience instead!")}}};try{const[e,a]=await Promise.all([v(),y()]);n=e,s=a;let t="Chat Ready!";s&&n?t="AI-Powered Chat Ready!":s?t="Cloud AI Chat Ready!":n?t="Local AI Chat Ready!":t="Smart Chat Ready!",o&&(o.textContent=t),console.log("AI Services Status:",{local:n,external:s})}catch(e){o&&(o.textContent="Chat Ready!"),console.log("AI services check failed:",e)}g.addEventListener("click",()=>{f.classList.toggle("hidden"),f.classList.contains("hidden")||I()}),window.addEventListener("ai-keys-updated",async()=>{s=await y();let e="Chat Ready!";s&&n?e="AI-Powered Chat Ready!":s?e="Cloud AI Chat Ready!":n?e="Local AI Chat Ready!":e="Smart Chat Ready!",o&&(o.textContent=e),console.log("AI keys updated. External AI available:",s)}),h&&m.addEventListener("click",()=>{u.classList.toggle("hidden")}),document.querySelectorAll(".emoji-btn").forEach(e=>{e.addEventListener("click",()=>{l&&e.textContent&&(l.value+=e.textContent,l.focus())})}),c.addEventListener("click",b),l.addEventListener("keydown",e=>{e.key==="Enter"&&(e.preventDefault(),b())}),h&&document.addEventListener("click",e=>{e.target instanceof Node&&!m.contains(e.target)&&!u.contains(e.target)&&u.classList.add("hidden")})});
