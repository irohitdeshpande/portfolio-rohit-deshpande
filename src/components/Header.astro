---
import Menu from "@icons/Menu.astro";
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;

const { siteLogo, navLinks } = Astro.props;
---

<header
  id="main-header"
  class="sticky top-0 z-50 w-full bg-black transition-transform duration-300 ease-in-out px-3 py-3 sm:px-5 sm:py-4"
>
  <div class="flex items-center justify-between max-w-5xl mx-auto w-full">
    <a href="/" aria-label="Home link" class="flex items-center">
    </a>
    <div class="flex items-center gap-2">
      <button
        type="button"
        id="menu-button"
        class="px-2 py-1 text-neutral rounded-lg focus:outline-none focus:ring-2 focus:ring-primary sm:hidden"
        aria-expanded="false"
        aria-controls="main-menu"
      >
        <Menu />
      </button>
      <nav
        class="absolute top-14 right-3 w-40 hidden rounded-xl border border-neutral/40 bg-black px-3 py-3 text-neutral sm:static sm:block sm:border-0 sm:bg-transparent sm:p-0"
        id="main-menu"
      >
        <ul class="flex flex-col gap-2 sm:flex-row sm:gap-2">
          <li class="relative">
            <a
              class={`nav-item relative block px-2 py-1 text-sm font-medium transition-all duration-500 after:absolute after:bottom-0 after:left-2/4 after:h-2 after:w-1 after:-translate-x-2/4 after:text-primary after:opacity-0 after:content-['•'] hover:text-white`}
              href="#top"
            >
              Home
            </a>
          </li>
          {
            navLinks.map((link) => (
              <li class="relative">
                <a
                  class={`nav-item relative block px-2 py-1 text-sm font-medium transition-all duration-500 after:absolute after:bottom-0 after:left-2/4 after:h-2 after:w-1 after:-translate-x-2/4 after:text-primary after:opacity-0 after:content-['•'] hover:text-white`}
                  href={link.href}
                >
                  {link.text}
                </a>
              </li>
            ))
          }
        </ul>
      </nav>
    </div>
  </div>
</header>

<script>
  // Toggle mobile menu
  const button = document.querySelector("#menu-button");
  const menu = document.querySelector("#main-menu");
  const navItems = document.querySelectorAll("#main-menu > ul > li > a");

  const toggleMenu = () => {
    menu?.classList.toggle("hidden");
    const isHidden = menu?.classList.contains("hidden");
    button?.setAttribute("aria-expanded", `${!isHidden}`);
  };

  button?.addEventListener("click", toggleMenu);
  navItems.forEach((item) => {
    item?.addEventListener("click", toggleMenu);
  });

  // Update navigation based on scroll position with Intersection Observer
  const observer = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("href") === `#${entry.target.id}`) {
              item.classList.add("text-white", "md:after:opacity-100");
            } else {
              item.classList.remove("text-white", "md:after:opacity-100");
            }
          });
        }
      });
    },
    { threshold: 0.5 },
  );

  document.querySelectorAll("section").forEach((section) => {
    observer.observe(section);
  });

  // Cleanup observer
  document.onvisibilitychange = () => {
    if (document.visibilityState === "hidden") {
      observer.disconnect();
    } else {
      document.querySelectorAll("section").forEach((section) => {
        observer.observe(section);
      });
    }
  };

  // Hide header on scroll down, show on scroll up
  let lastScrollY = window.scrollY;
  const header = document.getElementById("main-header");
  let ticking = false;

  function onScroll() {
    if (!ticking) {
      window.requestAnimationFrame(() => {
        const currentScrollY = window.scrollY;
        if (currentScrollY > lastScrollY && currentScrollY > 60) {
          // Scrolling down
          header && (header.style.transform = "translateY(-100%)");
        } else {
          // Scrolling up
          header && (header.style.transform = "translateY(0)");
        }
        lastScrollY = currentScrollY;
        ticking = false;
      });
      ticking = true;
    }
  }
  window.addEventListener("scroll", onScroll);
</script>

<style>
  header {
    animation-timeline: scroll();
    animation-range: 0 650px;
  }
  @media (max-width: 640px) {
    header {
      padding-left: 0.75rem;
      padding-right: 0.75rem;
      padding-top: 0.75rem;
      padding-bottom: 0.75rem;
    }
    .nav-item {
      padding: 0.5rem 0.75rem;
    }
    #main-menu {
      top: 3.5rem;
      right: 0.75rem;
      width: 10rem;
      padding: 0.75rem;
    }
  }
</style>
