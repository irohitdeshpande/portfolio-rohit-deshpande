---
import Section from "./Section.astro";
import type { ExperienceProps } from "@types";

interface Props {
  experience: ExperienceProps[];
}

const { experience } = Astro.props;
---

<Section text="Work Experience" href="experience">
  <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 sm:gap-6">
    {experience.slice(0, 2).map(({ company, position, startDate, endDate, summary, image }, index) => {
      const isCurrent = endDate === "Present";
      return (
        <div class="group h-full">
          <div class={`
            relative p-4 sm:p-5 lg:p-7 rounded-xl sm:rounded-2xl transition-all duration-200 ease-out shadow-lg h-full flex flex-col
            ${isCurrent 
              ? 'bg-white/8 hover:bg-white/10' 
              : 'bg-white/3 hover:bg-white/6'
            }
          `}>
            {/* Header Section - Stack on mobile, side-by-side on desktop */}
            <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3 sm:gap-4 mb-4">
              <div class="flex items-start gap-3 min-w-0 flex-1">
                {image && (
                  <div class="shrink-0">
                    <img
                      src={image}
                      alt={`${company} logo`}
                      class="w-12 h-12 sm:w-14 sm:h-14 lg:w-16 lg:h-16 rounded-full object-cover"
                      loading="lazy"
                      onerror="this.style.display='none'"
                    />
                  </div>
                )}
                <div class="flex-1 min-w-0">
                  <h3 class="text-base sm:text-lg lg:text-xl font-bold leading-tight break-words mb-1" style="color: var(--text-secondary) !important;">
                    {company}
                  </h3>
                  <h4 class="text-sm sm:text-base lg:text-lg font-semibold leading-tight break-words" style="color: var(--text-neutral) !important;">
                    {position}
                  </h4>
                </div>
              </div>
              
              {/* Timeline Badge - Inline with heading on all screen sizes */}
              <div class={`
                flex items-center gap-1.5 sm:gap-2 
                px-3 sm:px-4 py-1.5 sm:py-2 rounded-lg text-xs sm:text-sm font-medium 
                self-start shrink-0
                ${isCurrent 
                  ? 'bg-white/15' 
                  : 'bg-white/10'
                }
              `} style="color: var(--text-secondary) !important;">
                <svg class="w-4 h-4 shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                </svg>
                <span class="whitespace-nowrap">{startDate} â€” {endDate}</span>
                {isCurrent && (
                  <span class="ml-1 px-2 py-0.5 bg-white/25 text-[10px] sm:text-xs rounded-full font-medium" style="color: var(--text-primary) !important; background-color: var(--bg-tertiary) !important;">
                    Current
                  </span>
                )}
              </div>
            </div>

            {/* Summary/Description with justified text */}
            <div class="space-y-3 sm:space-y-4 flex-1">
              {Array.isArray(summary) ? (
                <ul class="space-y-3 sm:space-y-4">
                  {summary.map((item, itemIndex) => (
                    <li class="flex items-start gap-3 leading-relaxed" style="color: var(--text-secondary) !important;">
                      <div class={`
                        w-1.5 h-1.5 sm:w-2 sm:h-2 rounded-full mt-2 shrink-0
                        ${isCurrent ? 'bg-white/80' : 'bg-white/50'}
                      `} style="background-color: var(--text-neutral) !important;"></div>
                      <span class="text-sm sm:text-base text-justify flex-1">{item}</span>
                    </li>
                  ))}
                </ul>
              ) : (
                <p class="leading-relaxed text-sm sm:text-base text-justify" style="color: var(--text-secondary) !important;">
                  {summary}
                </p>
              )}
            </div>

            {/* Current Indicator - Responsive positioning */}
            {isCurrent && (
              <div class="absolute top-3 sm:top-4 right-3 sm:right-4">
                <div class="w-2 h-2 sm:w-2.5 sm:h-2.5 rounded-full animate-pulse" style="background-color: var(--text-primary) !important;"></div>
              </div>
            )}

            {/* Mobile-specific gradient overlay for visual depth */}
            <div class="absolute inset-0 bg-gradient-to-br from-transparent via-transparent to-black/5 rounded-xl sm:rounded-2xl pointer-events-none"></div>
          </div>
        </div>
      );
    })}
  </div>
</Section>